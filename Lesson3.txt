When would you want to use a remote repository rather than keeping all your work
local?

    The main reasons why you would use a remote repository are to backup all 
    the files you are working on and share them publicly or with your team mates.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Automatic pull of a remote can help you to keep up with what
    your colleagues are doing. However, if you are writing in local
    the same part ofcode as your team mates, you may get unexpected changes, 
    which are confusing or don't work with your code.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?

    Cloning is used when you need to copy a GitHub repository into your 
    computer, in order to modify or use it locally. Forking is used to create
    a GitHub repository starting from an extisting one. It is useful to create 
    an alternative or updated version of a project. Branches are labels for
    different production lines. They are helpful to create slightly different 
    or updated version of a code and test it before merging changes into the
    official release.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can access it offline and check changes before merging it with the 
    local repository. Moreover you can use this just to check how the 
    project is going on. 
 
How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

    According to me Git and GitHub make a lot easier sharing, combining and 
    comparing different code versions to get the best. 
    However, I think that if I had to use other tools, I'd rather use another
    version-control system and a chat client, which makes colaborating, sharing 
    files and exchanging ideas among many people faster, though they aren't 
    integrated with other development tools. 

When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

    According to me, the first approach should be used when creating new 
    changes which should be checcked before being committed to the master
    branch, because it isn't destructive and you don't update the master 
    branch (usually the official and stable one) with unstable features. 
    However, if something should be fixed really fast, maybe updating the 
    master branch makes it more visible to the community.
