What happens when you initialize a repository? Why do you need to do it?

	In order to make git work, we have to initialize a repository;
	this means that git will start tracking the changes made to 
	files in that folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers? 

	It is useful if you want to commit only the files you have modified, 
	making focusing on them easier.

How can you use the staging area to make sure you have one commit per logical
change?

	Staging area permits to double-check the files before committing any changes, thanks to the "git diff" and "git diff --staged". In this way you can be sure
	there is only one change per commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are useful to create different versions of your code, different
	from the official one (an experimental or alternative version), because you can eventually switch back to the official and functionant code if something goes 
	wrong, you want to focus on the official releas of that or you aren't just 
	satisfied with what are you doing.

How do the diagrams help you visualize the branch structure?

	Having a visual representation of the situation usually helps to understand it
	better. That's why using branches diagram is be useful: it shows which commits
	belong to a certai branch and where these ones start and end. In this way you 
	always know how mutch the code you are working on is updated, for example.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When you merge two branches in Git, you create one commit which integrates 
	the code of both last commits of the two branches. Moreover every commit 
	of one branch becomes part of the other one (commits of both branches are ordered with
	timestamp). The diagram used to represent the merging process it's helpful to 
	show that the merging commit has the two branches'last commits as parents and 
	that branches are stripped together (commits aren't put in one line to make 
	the diagram clear).

What are the pros and cons of Git's automatic merging vs. always doing merges
manually? 

	Git's autmatic merging saves a lot of tome to the developper. 
	However, if you want to control the merging process precisely, 
	in a different way from what Git does (and of course if you have to solve merging conflicts), 
	then doing this task manually is a better solution (but remember you shuold always take into 
	account the ammuont of code you need to modify). 